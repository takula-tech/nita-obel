[package]
name = "obel_ecs"
version = "0.0.9"
description = "Provides core App functionality"
keywords = ["obel", "obel_engine", "obel_ecs"]
categories = { workspace = true }
edition = { workspace = true }
rust-version = { workspace = true }
homepage = { workspace = true }
license = { workspace = true }
repository = { workspace = true }
documentation = { workspace = true }
readme = "README.md"

[dependencies]
# obel deps
obel_ecs_macros = { workspace = true }
obel_reflect = { workspace = true, optional = true, features = ["smallvec"] }
obel_tasks = { workspace = true }
obel_platform = { workspace = true, features = ["alloc"] }

bitflags = { workspace = true }
concurrent-queue = { workspace = true }
disqualified = { workspace = true }
fixedbitset = { workspace = true }
serde = { workspace = true, optional = true, features = [
  "alloc",
  'serde_derive',
] }
thiserror = { workspace = true }
derive_more = { workspace = true, features = [
  "from",
  "display",
  "into",
  "as_ref",
] }
nonmax = { workspace = true }
arrayvec = { workspace = true, optional = true }
smallvec = { workspace = true, features = ["union", "const_generics"] }
indexmap = { workspace = true }
variadics_please = { workspace = true }
tracing = { workspace = true, optional = true }
log = { workspace = true }
bumpalo = { workspace = true }

[target.'cfg(not(all(target_has_atomic = "8", target_has_atomic = "16", target_has_atomic = "32", target_has_atomic = "64", target_has_atomic = "ptr")))'.dependencies]
concurrent-queue = { workspace = true, features = ["portable-atomic"] }

[dev-dependencies]
static_assertions = { workspace = true }
rand = { workspace = true }
serde_test = { workspace = true }

[lints]
workspace = true

[package.metadata.docs.rs]
workspace = true

[badges]
maintenance = { status = "actively-developed" }

[features]
default = ["std", "obel_reflect", "async_executor", "backtrace"]

# Functionality
## Enables multithreading support. Schedules will attempt to run systems on
## multiple threads whenever possible.
multi_threaded = ["obel_tasks/multi_threaded", "dep:arrayvec"]
## Adds serialization support through `serde`.
serialize = ["dep:serde", "obel_platform/serialize", "indexmap/serde"]
## Adds runtime reflection support using `obel_reflect`.
obel_reflect = ["dep:obel_reflect"]
## Extends reflection support to functions.
reflect_functions = ["obel_reflect", "obel_reflect/functions"]
## Use the configurable global error handler as the default error handler
configurable_error_handler = []
## Enables automatic backtrace capturing in BevyError
backtrace = ["std"]

# Debugging Features
## Enables `tracing` integration, allowing spans and other metrics to be reported
## through that framework.
trace = ["std", "dep:tracing"]
## Enables a more detailed set of traces which may be noisy if left on by default.
detailed_trace = ["trace"]
## Provides system stepping support, allowing them to be paused, stepped, and
## other debug operations which can help with diagnosing certain behaviors.
obel_debug_stepping = []
## Provides more detailed tracking of the cause of various effects within the ECS.
## This will often provide more detailed error messages.
track_location = []

# Executor Backend
## Uses `async-executor` as a task execution backend.
## This backend is incompatible with `no_std` targets.
async_executor = ["std", "obel_tasks/async_executor"]

# Platform Compatibility
## Allows access to the `std` crate. Enabling this feature will prevent compilation
## on `no_std` targets, but provides access to certain additional features on
## supported platforms.
std = [
  "obel_ecs_macros/std",
  "obel_reflect?/std",
  "obel_tasks/std",
  "obel_platform/std",
  "bitflags/std",
  "concurrent-queue/std",
  "disqualified/alloc",
  "fixedbitset/std",
  "indexmap/std",
  "serde?/std",
  "nonmax/std",
  "arrayvec?/std",
  "log/std",
]

## `critical-section` provides the building blocks for synchronization primitives
## on all platforms, including `no_std`.
critical-section = [
  "obel_tasks/critical-section",
  "obel_platform/critical-section",
  "obel_reflect?/critical-section",
]
