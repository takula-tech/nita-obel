[package]
name = "obel_reflect"
version = "0.0.7"
description = "provide rust reflect function to ease game developments"
keywords = ["obel", "obel_engine", "obel_reflect"]
categories = { workspace = true }
edition = { workspace = true }
rust-version = { workspace = true }
homepage = { workspace = true }
license = { workspace = true }
repository = { workspace = true }
documentation = { workspace = true }
readme = "README.md"

[features]
default = ["std", "smallvec", "debug"]

# Features
## When enabled, allows documentation comments to be accessed via reflection
documentation = []
## Enables function reflection
functions = []

# When enabled, provides Bevy-related reflection implementations
obel = ["smallvec", "smol_str"]

# Debugging Features
## Enables features useful for debugging reflection
debug = ["debug_stack"]
## When enabled, keeps track of the current serialization/deserialization context for better error messages
debug_stack = []

# Integrations
## Adds reflection support to `glam` types.
glam = ["dep:glam"]
## Adds reflection support to `petgraph` types.
petgraph = ["dep:petgraph", "std"]
## Adds reflection support to `smallvec` types.
smallvec = ["dep:smallvec"]
## Adds reflection support to `uuid` types.
uuid = ["dep:uuid"]
## Adds reflection support to `wgpu-types` types.
wgpu-types = ["dep:wgpu-types", "std"]

# Platform Compatibility
## Allows access to the `std` crate. Enabling this feature will prevent compilation
## on `no_std` targets, but provides access to certain additional features on
## supported platforms.
std = [
  "alloc",
  "platform_std",
  "erased-serde/std",
  "downcast-rs/std",
  "serde/std",
  "glam?/std",
  "smol_str?/std",
  "uuid?/std",
]
alloc = []
platform_std = ["obel_platform/std", "obel_platform/serialize"]
## `critical-section` provides the building blocks for synchronization primitives
## on all platforms, including `no_std`.
critical-section = ["obel_platform/critical-section"]
## `portable-atomic` provides additional platform support for atomic types and
## operations, even on targets without native support.
portable-atomic = ["obel_platform/portable-atomic"]

[dependencies]
obel_reflect_derive = { workspace = true }
obel_platform = { workspace = true, features = ["alloc", "serialize"] }
# toml_edit = { workspace = true, features = ["parse"] }
# syn = { workspace = true, features = ["full"] }
# quote = { workspace = true }
# proc-macro2 = { workspace = true }
foldhash = { workspace = true }
erased-serde = { workspace = true, features = ["alloc"] }
disqualified = { workspace = true }
downcast-rs = { workspace = true }
thiserror = { workspace = true }
derive_more = { workspace = true, features = ["from"] }
serde = { workspace = true, features = ["alloc", 'derive'] }
spin = { workspace = true, features = ["once", "rwlock"] }
assert_type_match = { workspace = true }
variadics_please = { workspace = true }
glam = { workspace = true, optional = true, features = ["serde"] }
smallvec = { workspace = true, optional = true }
petgraph = { workspace = true, optional = true, features = ["serde-1"] }
smol_str = { workspace = true, optional = true, features = ["serde"] }
uuid = { workspace = true, optional = true, features = ["v4", "serde"] }
wgpu-types = { workspace = true, optional = true, features = ["serde"] }

[dev-dependencies]
ron = { workspace = true }
rmp-serde = { workspace = true }
bincode = { workspace = true }
serde_json = { workspace = true }
serde = { workspace = true }
static_assertions = { workspace = true }

[lints]
workspace = true

[package.metadata.docs.rs]
workspace = true

[badges]
maintenance = { status = "actively-developed" }

[[example]]
name = "reflect_docs"
path = "examples/reflect_docs.rs"
required-features = ["documentation"]
