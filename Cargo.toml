[package]
name = "obel"
version = "0.0.5"
exclude = [
  "assets/",
  "benches",
  "engine/",
  "examples/",
  "templates/",
  "tests/",
  "tools/",
  ".github/",
]
description = "A refreshingly simple data-driven game engine and app framework"
categories = { workspace = true }
edition = { workspace = true }
rust-version = { workspace = true }
homepage = { workspace = true }
license = { workspace = true }
repository = { workspace = true }
documentation = { workspace = true }
readme = { workspace = true }

[features]
# Force dynamic linking, which improves iterative compile times
dynamic_linking = ["dep:obel_dylib", "obel_api/dynamic_linking"]

[profile.release]
lto = true
codegen-units = 1
# we're long alive game server who better prefer unwind to panic = "abort"
panic = "unwind"

[dependencies]
obel_api = { workspace = true }

[target.'cfg(not(target_family = "wasm"))'.dependencies] # Wasm does not support dynamic linking.
obel_dylib = { workspace = true, optional = true }

[lints]
workspace = true

[package.metadata.docs.rs]
workspace = true

[workspace]
resolver = "2"
exclude = ["templates/", "tools/typescript"]
members = [
  "tools/*",
  "engine/editor",
  "engine/platform",
  "engine/api",
  "engine/dylib",
  "engine/feat/*",
  "engine/asset/*",
  "engine/core/*",
  # "engine/core/reflect/derive",
  # Several crates with macros have `compile tests` nested inside them.
  "engine/**/compile_ui_test",
]

[workspace.package]
edition = "2021"
rust-version = "1.82.0"
homepage = "https://obelengine.org"
license = "MIT OR Apache-2.0"
categories = ["game-engines", "graphics", "gui", "rendering"]
repository = "https://github.com/obelengine/obel"
documentation = "https://docs.rs/obel"
readme = "README.md"

[workspace.dependencies]
# [obel-dependencies]
obel_api = { path = "engine/api", default-features = false, version = "0.0.5" }
obel_dylib = { path = "engine/dylib", default-features = false, version = "0.0.5" }
obel_app = { path = "engine/core/app", default-features = false, version = "0.0.5" }
obel_diagnostic = { path = "engine/core/diagnostic", default-features = false, version = "0.0.5" }
obel_reflect_utils = { path = "engine/core/reflect/utils", default-features = false, version = "0.0.5" }
obel_reflect_derive = { path = "engine/core/reflect/derive", default-features = false, version = "0.0.5" }
obel_reflect = { path = "engine/core/reflect", default-features = false, version = "0.0.5" }
obel_statechart = { path = "engine/core/statechart", default-features = false, version = "0.0.5" }
obel_scene = { path = "engine/feat/scene", default-features = false, version = "0.0.5" }
obel_platform = { path = "engine/platform", default-features = false, version = "0.0.5" }
obel_ui_test_runner = { path = "tools/ui_test_runner", default-features = false, version = "0.0.5" }

# [dev-dependencies]
ron = "0.8.0"
rmp-serde = "1.1"
bincode = "1.3"
serde_json = "1.0"
static_assertions = "1.1.0"

# [dependencies]
foldhash = { version = "0.1.3", default-features = false }
tracing = { version = "0.1", default-features = false }
const-fnv1a-hash = "1.1.0"
hashbrown = { version = "0.15.1", default-features = false }
thread_local = { version = "1.0" }
# [target.'cfg(or(target_arch = "macOS"),target_arch = "linux")'.dependencies]
# #[global_allocator]
# static GLOBAL: tikv_jemallocator::Jemalloc = tikv_jemallocator::Jemalloc;
# on Linux, jemalloc can be configured to use transparent huge pages (THP).
# This can further speed up programs, possibly at the cost of higher memory usage.
# MALLOC_CONF="thp:always,metadata_thp:always" cargo build --release
tikv-jemallocator = "0.6.0"
# another cross-platform allocator
#[global_allocator]
# static GLOBAL: mimalloc::MiMalloc = mimalloc::MiMalloc;
mimalloc = "0.1.43"
# [target.'cfg(target_arch = "wasm32")'.dependencies]
getrandom = { version = "0.2.0", default-features = false }
web-time = { version = "1.1", default-features = false }
sysinfo = { version = "0.33.0", default-features = false }
erased-serde = { version = "0.4", default-features = false }
disqualified = { version = "1.0", default-features = false }
downcast-rs = { version = "2", default-features = false }
thiserror = { version = "2", default-features = false }
derive_more = { version = "1", default-features = false }
serde = { version = "1", default-features = false }
assert_type_match = "0.1.1"
variadics_please = "1.1"
toml_edit = { version = "0.22.7", default-features = false }
syn = "2.0"
quote = "1.0"
proc-macro2 = "1.0"
smallvec = { version = "1.11", default-features = false }
glam = { version = "0.29", default-features = false }
petgraph = { version = "0.6" }
smol_str = { version = "0.2.0", default-features = false }
uuid = { version = "1.0", default-features = false }
wgpu-types = { version = "23", default-features = false }
critical-section = { version = "1.2.0", default-features = false }
portable-atomic = { version = "1", default-features = false }
portable-atomic-util = { version = "0.2.4", default-features = false }
spin = { version = "0.9.8", default-features = false }

[workspace.lints.rust]
missing_docs = "warn"
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(docsrs_dep)'] }
unsafe_code = "deny"
unsafe_op_in_unsafe_fn = "warn"
unused_qualifications = "warn"

[workspace.metadata.docs.rs]
rustdoc-args = ["-Zunstable-options", "--generate-link-to-definition"]
all-features = true
